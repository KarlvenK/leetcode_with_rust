use std::collections::{HashMap, VecDeque};

struct Solution;
impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, mut initial: Vec<i32>) -> i32 {
        let n = graph.len();
        let mut color = vec![0; n];
        let mut block_size: HashMap<i32, i32> = HashMap::new();
        let mut cnt = 0;
        for i in 0..n {
            match color[i] {
                0 => {
                    cnt += 1;
                    color[i] = cnt;
                    let mut tot = 1;
                    let mut que = VecDeque::new();
                    que.push_back(i);
                    while let Some(u) = que.pop_front() {
                        for v in 0..n {
                            if graph[u][v] == 1 && color[v] == 0 {
                                color[v] = color[u];
                                que.push_back(v);
                                tot += 1;
                            }
                        }
                    }
                    block_size.insert(cnt, tot);
                }
                _ => (),
            }
        }

        let mut block_has_init: HashMap<i32, i32> = HashMap::new();
        initial.iter().for_each(|&x| {
            *block_has_init.entry(color[x as usize]).or_insert(0) += 1;
        });

        initial.sort_by(|a, b| a.cmp(b));
        let mut ans = initial[0];
        let mut temp = 0;
        for &u in initial.iter() {
            if block_has_init[&color[u as usize]] == 1 {
                if block_size[&color[u as usize]] > temp {
                    temp = block_size[&color[u as usize]];
                    ans = u;
                }
            }
        }
        ans
    }
}
